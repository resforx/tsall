/*
function testset<T>(func: (value: T) => void, arr: T[]): void {
    arr.forEach(func);
}

const a = testset<string>((value) => {
    console.log(value);
}, ["hello", "world"]);

function testset1<T>(func: (value: T) => void, num: T): void {
    func(num);
}

const a1 = testset1<number>((value) => {
    for (let i = 0; i < value; i++) {
        console.log(i);
    }
}, 5);
*/

// export function set<T>(initializer: (value: T) => void): T {
//     const value = {} as T;
//     initializer(value);
//     return value;
// }

// // StateSetter 타입 정의

// interface State<T> {
//   state: T;
//   setState: (updater: StateSetter<T>) => void;
// }

// function utilizeState<T>(initialState: T): State<T> {
//   let currentState = initialState;

//   const updateState = (updater: StateSetter<T>) => {
//     // StateSetter가 함수인 경우 함수를 호출하여 새로운 상태를 생성
//     const newState = typeof updater === 'function' ? (updater as (prevState: T) => T)(currentState) : updater;
//     // 새로운 상태를 현재 상태로 설정
//     currentState = { ...currentState, ...newState };
//   };

//   return { state: currentState, setState: updateState };
// }

// 사용 예시
// interface MyState {
//   count: number;
//   message: string;
// }

// const initialState: MyState = {
//   count: 0,
//   message: "Hello",
// };

// const { state, setState } = utilizeState(initialState);
// console.log(state);

// setState(value => ({ count: value.count + 1, message: "hello world" }));
// console.log(state); // { count: 1, message: "hello world" }

// setState(value => ({
//     deep: {
//         nested: {
//             obj: {
//                 count: value.deep.nested.obj.count + 1
//             }
//         }
//     }
// }));

// console.log(getState().deep.nested.obj.count);

export function utilizeEffect<T>(watch: () => T, effect: (value: T) => void): void {
  let oldValue = watch();
  setInterval(() => {
    const newValue = watch();
    if (oldValue !== newValue) {
      effect(newValue);
      oldValue = newValue;
    }
  }, 100);
}

export function utilizeMemo<T>(factory: () => T, deps: any[]): T {
  let memoDeps = deps;
  let memoValue = factory();
  return () => {
    const newDeps = deps;
    if (memoDeps.some((dep, i) => !Object.is(dep, newDeps[i]))) {
      memoDeps = newDeps;
      memoValue = factory();
    }
    return memoValue;
  };
}

// 사용자 정보를 불러오는 비동기 함수
const fetchUser = async (userId: string) => {
  const response = await fetch(`/api/user/${userId}`);
  if (!response.ok) {
    throw new Error('Failed to fetch user');
  }
  return response.json();
};

// useAsyncState를 사용하여 사용자 정보를 불러오고 그 상태를 추적
const [userState, loadUser] = useAsyncState(() => fetchUser('123'));

// 사용자 정보를 불러옵니다.
loadUser();

// 이후에는 userState를 통해 사용자 정보를 불러오는 작업의 상태를 확인할 수 있습니다.
if (userState.loading) {
  console.log('Loading user...');
} else if (userState.error) {
  console.error('Failed to load user:', userState.error);
} else if (userState.data) {
  console.log('Loaded user:', userState.data);
}

interface AsyncState<T> {
  loading: boolean;
  data: T | null;
  error: Error | null;
}

function useAsyncState<T>(asyncAction: () => Promise<T>): [AsyncState<T>, () => Promise<void>] {
  const { getState, setState } = utilizeState<AsyncState<T>>({
    loading: false,
    data: null,
    error: null
  });

  const execute = async () => {
    setState({ loading: true, data: null, error: null });

    try {
      const data = await asyncAction();
      setState({ loading: false, data, error: null });
    } catch (error) {
      setState({ loading: false, data: null, error: getState().error });
    }
  };

  return [getState(), execute];
}
